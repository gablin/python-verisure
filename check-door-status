#!/usr/bin/python3

import argparse
import http.client, urllib
import json
import os
import sys
import time
import verisure


#==========
# SETTINGS
#==========

CONFIG_FILE = '/etc/verisure/config.json'
FAIL_COUNT_FILE = '/var/lib/verisure/failures'


#================
# UTIL FUNCTIONS
#================

def formatMsg(prefix, msg):
  indented_msg = msg.replace('\n', '\n' + ' ' * len(prefix))
  return '{}{}'.format(prefix, indented_msg)

def fail(msg):
  sys.stderr.write(formatMsg('E: ', msg) + '\n')
  sys.exit(1)

def info(msg):
  sys.stdout.write(formatMsg('I: ', msg) + '\n')

class MyArgParser(argparse.ArgumentParser):
  def error(self, msg):
    fail('{}\n{}'.format(msg, 'Use \'--help\' for option description'))

def parseCli():
  parser = MyArgParser()
  parser.add_argument( '-c'
                     , '--create-cookie'
                     , help='Create a new MFA cookie'
                     , default=False
                     , action='store_true'
                     )
  return parser.parse_args()

def ensureFileExists(f):
  if not os.path.exists(f):
    fail('File does not exist: {}'.format(f))
  if not os.path.isfile(f):
    fail('Not a file: {}'.format(f))

def createFileIfNotFound(f, default_content):
  d = os.path.dirname(f)
  os.makedirs(name=d, exist_ok=True)
  if os.path.isfile(f):
    return
  with open(f, 'w') as fh:
    print(default_content)
    fh.write(default_content)

def readConfig():
  global CONFIG_FILE
  f = CONFIG_FILE
  ensureFileExists(f)
  with open(f, 'r') as fh:
    return json.load(fh)

def writeConfig(data):
  global CONFIG_FILE
  f = CONFIG_FILE
  with open(f, 'w') as fh:
    return json.dump(data, fh, indent=2, sort_keys=True)

def readFailCount():
  global FAIL_COUNT_FILE
  f = FAIL_COUNT_FILE
  createFileIfNotFound(f, '0')
  with open(f, 'r') as fh:
    return int(fh.read().strip())

def writeFailCount(n):
  global FAIL_COUNT_FILE
  f = FAIL_COUNT_FILE
  createFileIfNotFound(f, '0')
  with open(f, 'w') as fh:
    return fh.write('{}'.format(n))

def currentTimestamp():
  return time.localtime()

def serTimestamp(ts):
  return time.strftime('%Y-%m-%dT%H:%M:%S', ts)

def deserTimestamp(s):
  return time.strptime(s, '%Y-%m-%dT%H:%M:%S')

def timestamp2secs(ts):
  return time.mktime(ts)

def nowSecs():
  return timestamp2secs(currentTimestamp())

def sendMessage(config, msg):
  conn = http.client.HTTPSConnection('api.pushover.net:443')
  conn.request('POST'
              , '/1/messages.json'
              , urllib.parse.urlencode(
                  { 'token': config['pushover_api_token']
                  , 'user': config['pushover_user_key']
                  , 'title': 'VARNING'
                  , 'message': msg
                  , 'priority': 1
                  , 'sound': config['pushover_sound']
                  }
                )
             , { 'Content-type': 'application/x-www-form-urlencoded' }
             )
  res = conn.getresponse()
  if res.status != 200:
    body = res.read().decode('ascii')
    fail('Failed to send message: {}'.format(body))


#======
# MAIN
#======

args = parseCli()
config = readConfig()
session = verisure.Session( config['verisure_username']
                          , config['verisure_password']
                          , config['cookie_file']
                          )

if args.create_cookie:
  session.request_mfa()
  code = input('Enter verification code: ')
  session.validate_mfa(code)
  info('Cookie created')
  sys.exit(0)

try:
  installations = session.login_cookie()
  giid = installations['data']['account']['installations'][0]['giid']
  session.set_giid(giid)
except Exception as e:
  n = readFailCount() + 1
  writeFailCount(n)
  if n >= config['fail_limit']:
    sendMessage(config, str(e))
    fail(str(e))
  else:
    # Die silently
    sys.exit(1)
writeFailCount(0)

# Read door status
result = session.request(session.door_window())
devices = result['data']['installation']['doorWindows']
for (i, door) in enumerate(config['doors']):
  for dev in devices:
    if dev['device']['deviceLabel'] == door['label']:
      if dev['state'] == 'CLOSE':
        door['last_closed'] = serTimestamp(currentTimestamp())
      else:
        # Check if door has been opened longer than limit
        ts = deserTimestamp(door['last_closed']) \
             if 'last_closed' in door else currentTimestamp()
        open_s = nowSecs() - timestamp2secs(ts)
        if open_s >= door['limit']:
          res = sendMessage(config, door['alarm_message'])

          # Reset timestamp to prevent alarm spamming
          door['last_closed'] = serTimestamp(currentTimestamp())
      config['doors'][i] = door
      break

# Read lock status
result = session.request(session.smart_lock())
devices = result['data']['installation']['smartLocks']
for (i, lock) in enumerate(config['locks']):
  for dev in devices:
    if dev['device']['deviceLabel'] == lock['label']:
      if dev['lockStatus'] == 'LOCKED':
        lock['last_locked'] = serTimestamp(currentTimestamp())
      else:
        # Check if lock has been unlocked longer than limit
        ts = deserTimestamp(lock['last_locked']) \
             if 'last_locked' in lock else currentTimestamp()
        open_s = nowSecs() - timestamp2secs(ts)
        if open_s >= lock['limit']:
          res = sendMessage(config, lock['alarm_message'])

          # Reset timestamp to prevent alarm spamming
          lock['last_closed'] = serTimestamp(currentTimestamp())
      config['locks'][i] = lock
      break

writeConfig(config)
